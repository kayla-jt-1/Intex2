@page "/admin/accidents"
@page "/admin"
@inherits OwningComponentBase<ICrashRepository>

<table class="table table-sm table-striped table-bordered">

    <thead>
        <tr>
            <th>CRASH ID</th>
            <th>DATE/TIME</th>
            <th>ROUTE NUMBER</th>
            <th>ADDRESS</th>
            <th>CITY</th>
            <th>COUNTY</th>
            <th>CRASH SEVERITY</th>
        </tr>
    </thead>

    <tbody>

        @if (CrashData?.Count() > 0)
        {
            //List the crashes
            @foreach (Crash c in CrashData)
            {
                <tr>
                    <td>@c.CRASH_ID</td>
                    <td>@c.CRASH_DATETIME</td>
                    <td>@c.ROUTE</td>
                    <td>@c.MAIN_ROAD_NAME</td>
                    <td>@c.CITY</td>
                    <td>@c.COUNTY_NAME</td>
                    <td>@c.CRASH_SEVERITY_ID</td>


                    @*should we have this details button or should they just be able to click on the whole cell and get more info?????*@
                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(c.CRASH_ID)">Details</NavLink>
                    </td>

                    <td>
                        <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(c.CRASH_ID)">Edit</NavLink>
                    </td>

                    @*NEEDS VERIFICATION BEFORE DELETION!!!!!!!!*@
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(x => RemoveCrash(c))">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Crashes</td>
            </tr>
        }

    </tbody>

</table>

<!--this was a button to add a new crash, but I think we're putting that in the header-->
@*<NavLink class="btn btn-primary" href="/admin/projects/create">Create</NavLink>*@

    @code {

        public ICrashRepository repo => Service;

        public IEnumerable<Crash> CrashData { get; set; }

        protected async override Task OnInitializedAsync()
        {
            await UpdateData();
        }

        public async Task UpdateData()
        {
            CrashData = await repo.Crashes.ToListAsync();
        }

        public string GetDetailsUrl(long id) => $"/admin/accidents/details/{id}";
        public string GetEditUrl(long id) => $"/admin/accidents/edit/{id}";

        public async Task RemoveCrash(Crash c)
        {
            repo.DeleteCrash(c);
            await UpdateData();
        }

    }
